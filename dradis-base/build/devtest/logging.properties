# see http://logging.apache.org/log4j/docs/index.html and http://logging.apache.org/log4j/docs/manual.html

# This file is polled regularly by LISA applications at runtime so you can add new DEBUG loggers
# or change system-wide logging without restarting LISA apps.

log4j.rootCategory=INFO,A1

# For cloud runs, you probably want centralized logging so add the registry appender like this
#log4j.rootCategory=INFO,A1,registry
#
# and uncomment the registry appender properties at the end of this file.

# The following lines adjust the log levels of third-party libraries used by LISA so that
# they don't clutter the logs with messages unrelated to LISA.
log4j.logger.com.teamdev=WARN
log4j.logger.EventLogger=WARN
log4j.logger.org.apache=ERROR
log4j.logger.com.smardec=ERROR
log4j.logger.org.apache.http=ERROR
log4j.logger.org.apache.http.header=ERROR
log4j.logger.org.apache.http.wire=ERROR
log4j.logger.com.mchange.v2=ERROR
log4j.logger.org.hibernate=WARN
log4j.logger.org.jfree=ERROR
log4j.logger.com.jniwrapper=ERROR
log4j.logger.sun.rmi=INFO
log4j.logger.com.itko.util.ThreadDumper=INFO
log4j.logger.org.eclipse=WARN
log4j.logger.org.codehaus=WARN
log4j.logger.org.grails=WARN
log4j.logger.grails=WARN
log4j.logger.org.springframework=WARN
log4j.logger.jndi=WARN
log4j.logger.org.flywaydb=WARN
log4j.logger.com.jayway=WARN
log4j.logger.net.sf=WARN
log4j.logger.org.quartz=WARN

# Uncomment the following to enable the TRACE level debugging for NIO operations. This is used in conjunction with the
# local.properites property com.itko.lisa.vse.sio.loggerName=NIOSession
#log4j.logger.NIOSession=TRACE

# make this INFO if you want your profile events to be logged
log4j.logger.profiler=OFF

log4j.appender.A1=com.itko.util.log4j.TimedRollingFileAppender
log4j.appender.A1.File=${lisa.tmpdir}/${LISA_LOG}
log4j.appender.A1.MaxFileSize=10MB
log4j.appender.A1.MaxBackupIndex=5
log4j.appender.A1.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.A1.layout.ConversionPattern=%d{ISO8601}{UTC}Z (%d{HH:mm}) [%t] %-5p %-30c - %m%n



# Keep a separate log for VSE transaction match/no-match events, this makes debugging much easier.
# Change INFO below to WARN for production systems, the logging is expensive and will slow down
# systems with high transaction rates. Do not simply comment out the following line; explicitly
# set the log level to OFF or WARN instead of INFO
log4j.logger.VSE=INFO, VSEAPP
# If you want to add VSE logging to other log destinations, comment out the next line
log4j.additivity.VSE=false
log4j.appender.VSEAPP=com.itko.util.log4j.TimedRollingFileAppender
log4j.appender.VSEAPP.File=${lisa.tmpdir}/vse_matches.log
log4j.appender.VSEAPP.MaxFileSize=10MB
log4j.appender.VSEAPP.MaxBackupIndex=20
log4j.appender.VSEAPP.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.VSEAPP.layout.ConversionPattern=%d{ISO8601}{UTC}Z (%d{HH:mm})[%t] %-5p - %m%n

# Keep a separate log for advisory events. This logger warns of potential configuration issues, potential
# memory leaks, etc. It is deliberately kept separate to the application log to minimize noise.
log4j.logger.ADVICE=INFO, ADVICE_APP
log4j.additivity.ADVICE=false
log4j.appender.ADVICE_APP=org.apache.log4j.RollingFileAppender
log4j.appender.ADVICE_APP.File=${lisa.tmpdir}/advice.log
log4j.appender.ADVICE_APP.MaxFileSize=10MB
log4j.appender.ADVICE_APP.MaxBackupIndex=20
log4j.appender.ADVICE_APP.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.ADVICE_APP.layout.ConversionPattern=%d{ISO8601}{UTC}Z (%d{HH:mm}) %-5p - %m%n


# If periodic thread dumps are enabled, this is where they will be sent. Note that we log at INFO level so
# to actually get the thread dumps just change WARN in the next line to INFO, even with LISA servers and/or
# workstation running and you should get a thread dump in the named file within 30 seconds.  Search for 'threadDump'
# in lisa.properties for more info. This makes it very simple to get thread dump to debug performance issues, simply
# change WARN in the next line to INFO, wait for a minute or two, then (maybe) change it back to WARN to prevent the
# thread dumps.
#
# You can also generate a point-in-time thread dump with the LISA_HOME/bin/ServiceManager application
# e.g. ServiceManager -threadDump tcp://hostname:2014/Simulator  or use standard java tools such as jstack
#
log4j.logger.threadDumpLogger=WARN, THREAD_DUMPS
log4j.additivity.threadDumpLogger=false
log4j.appender.THREAD_DUMPS=org.apache.log4j.RollingFileAppender
log4j.appender.THREAD_DUMPS.File=${lisa.tmpdir}/threadDumps/TD_${LISA_LOG}
log4j.appender.THREAD_DUMPS.MaxFileSize=10MB
log4j.appender.THREAD_DUMPS.MaxBackupIndex=20
log4j.appender.THREAD_DUMPS.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.THREAD_DUMPS.layout.ConversionPattern=%d{ISO8601}{UTC}Z (%d{HH:mm}) [%t] %-5p - %m%n


## Mirror our logging to the (remote) registry.
#log4j.appender.registry=com.itko.lisa.net.LoggingToRegistryAppender
#log4j.appender.registry.layout=org.apache.log4j.EnhancedPatternLayout
#log4j.appender.registry.layout.ConversionPattern=%d{ISO8601}{UTC}Z [%t] %-5p - %m%n

# Keep a separate log for ACL events. This logger contains all logging related to
# to the authentication providers. It is deliberately kept separate to the application
# log to minimize noise.
log4j.logger.org.springframework.security.core=DEBUG, ACL_LOG
log4j.additivity.org.springframework.security.core=true
log4j.logger.org.springframework.security.ldap=DEBUG, ACL_LOG
log4j.additivity.org.springframework.security.ldap=true
log4j.logger.org.springframework.ldap.core=DEBUG, ACL_LOG
log4j.additivity.org.springframework.ldap.core=true
log4j.logger.com.ca.dts.security.authentication=DEBUG, ACL_LOG
log4j.additivity.com.ca.dts.security.authentication=false

log4j.appender.ACL_LOG=org.apache.log4j.RollingFileAppender
log4j.appender.ACL_LOG.File=${lisa.tmpdir}/acl.log
log4j.appender.ACL_LOG.MaxFileSize=10MB
log4j.appender.ACL_LOG.MaxBackupIndex=2
log4j.appender.ACL_LOG.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.ACL_LOG.layout.ConversionPattern=%d{ISO8601}{UTC}Z (%d{HH:mm}) [%t] %-5p %-30c - %m%n

